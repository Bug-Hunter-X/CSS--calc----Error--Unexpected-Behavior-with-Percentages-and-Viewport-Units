To avoid the issues associated with combining percentages and viewport units in subtractions within `calc()`, consider using alternative techniques.  For example, you could adjust your layout approach to avoid needing this type of complex calculation within `calc()`.  More robust and predictable layout strategies should be preferred.  One alternative method might be to use media queries or Javascript to handle responsive sizing in a more controlled manner.  Here's an example showcasing the use of media queries to achieve responsive width adjustments:

```css
/* Use media queries for responsive adjustments instead of calc() with mixed units */
@media (min-width: 768px) { /* Example breakpoint */
  .element {
    width: 50%;
  }
}

@media (max-width: 767px) { /* Example breakpoint */
  .element {
    width: 80%; /* Adjust as needed */
  }
}
```
This solution avoids the problematic `calc()` operation by using separate styles based on viewport width breakpoints.  This often leads to a more predictable and maintainable solution. Remember to adjust breakpoints and width values according to your specific design requirements.